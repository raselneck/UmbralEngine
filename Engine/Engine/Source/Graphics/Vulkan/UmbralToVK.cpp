#include "Engine/Logging.h"
#include "Graphics/Vulkan/UmbralToVK.h"

namespace VK
{
	/**
	 * @brief Gets the name of a VkResult.
	 *
	 * @param result The result.
	 * @return The name of the result.
	 */
	static constexpr FStringView GetVulkanResultName(const VkResult result)
	{
#define HANDLE_CASE(Value) case Value: return UM_STRINGIFY_AS_VIEW(Value)

		switch (result)
		{
		HANDLE_CASE(VK_SUCCESS);
		HANDLE_CASE(VK_NOT_READY);
		HANDLE_CASE(VK_TIMEOUT);
		HANDLE_CASE(VK_EVENT_SET);
		HANDLE_CASE(VK_EVENT_RESET);
		HANDLE_CASE(VK_INCOMPLETE);
		HANDLE_CASE(VK_ERROR_OUT_OF_HOST_MEMORY);
		HANDLE_CASE(VK_ERROR_OUT_OF_DEVICE_MEMORY);
		HANDLE_CASE(VK_ERROR_INITIALIZATION_FAILED);
		HANDLE_CASE(VK_ERROR_DEVICE_LOST);
		HANDLE_CASE(VK_ERROR_MEMORY_MAP_FAILED);
		HANDLE_CASE(VK_ERROR_LAYER_NOT_PRESENT);
		HANDLE_CASE(VK_ERROR_EXTENSION_NOT_PRESENT);
		HANDLE_CASE(VK_ERROR_FEATURE_NOT_PRESENT);
		HANDLE_CASE(VK_ERROR_INCOMPATIBLE_DRIVER);
		HANDLE_CASE(VK_ERROR_TOO_MANY_OBJECTS);
		HANDLE_CASE(VK_ERROR_FORMAT_NOT_SUPPORTED);
		HANDLE_CASE(VK_ERROR_FRAGMENTED_POOL);
		HANDLE_CASE(VK_ERROR_UNKNOWN);
		HANDLE_CASE(VK_ERROR_OUT_OF_POOL_MEMORY);
		HANDLE_CASE(VK_ERROR_INVALID_EXTERNAL_HANDLE);
		HANDLE_CASE(VK_ERROR_FRAGMENTATION);
		HANDLE_CASE(VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS);
		HANDLE_CASE(VK_PIPELINE_COMPILE_REQUIRED);
		HANDLE_CASE(VK_ERROR_SURFACE_LOST_KHR);
		HANDLE_CASE(VK_ERROR_NATIVE_WINDOW_IN_USE_KHR);
		HANDLE_CASE(VK_SUBOPTIMAL_KHR);
		HANDLE_CASE(VK_ERROR_OUT_OF_DATE_KHR);
		HANDLE_CASE(VK_ERROR_INCOMPATIBLE_DISPLAY_KHR);
		HANDLE_CASE(VK_ERROR_VALIDATION_FAILED_EXT);
		HANDLE_CASE(VK_ERROR_INVALID_SHADER_NV);
		HANDLE_CASE(VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT);
		HANDLE_CASE(VK_ERROR_NOT_PERMITTED_KHR);
		HANDLE_CASE(VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT);
		HANDLE_CASE(VK_THREAD_IDLE_KHR);
		HANDLE_CASE(VK_THREAD_DONE_KHR);
		HANDLE_CASE(VK_OPERATION_DEFERRED_KHR);
		HANDLE_CASE(VK_OPERATION_NOT_DEFERRED_KHR);
		HANDLE_CASE(VK_ERROR_COMPRESSION_EXHAUSTED_EXT);
		default: return "<unknown>"_sv;
		}

#undef HANDLE_CASE
	}

	void ReportError(const VkResult error, const FStringView call, const FSourceLocation sourceLocation)
	{
		const FStringView errorName = GetVulkanResultName(error);
		UM_LOG(Error, "Vulkan: {} error calling \"{}\"\n\tAt: {}", errorName, call, sourceLocation);
	}
}